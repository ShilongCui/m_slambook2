/***********************
* 3.6.2 实际的坐标变换例子
************************/

#include <iostream>
#include <vector>
#include <algorithm>
#include <Eigen/Core>
#include <Eigen/Geometry>

using namespace std;
using namespace Eigen;

int main(int argc, char **argv){
    
    Quaterniond q1(0.35, 0.2, 0.3 ,0.1), q2(-0.5, 0.4, -0.1, 0.2); // 两个小萝卜自身姿态的两个四元数

    // 四元数使用之前需要归一化
    q1.normalize();
    q2.normalize();

    // 两个小萝卜的位置的两个三维坐标
    Vector3d t1(0.3, 0.1, 0.1), t2(-0.1, 0.5, 0.3);
    // 小萝卜一号坐标系下该点坐标
    Vector3d p1(0.5, 0, 0.2),
             p2; // 小萝卜二号坐标系下该点的坐标。


    /* 用四元数求解p2坐标 */
    /********************************************************************* 
    * 假设目标点p在世界坐标系下的坐标为：pw,
    * 利用四元数表示旋转，两个小萝卜坐标系下p点坐标有如下公式：  p1 = q1 * pw + t1
    *                                                   p2 = q2 * pw + t2
    * 由以上的坐标变换关系，可以推得： p2 = q2  * q1^-1 * (p1 - t1) + t2
    * 
    * 注意使用四元数表示旋转，数学上应该是 p' = q * p * q^{-1}, 
    * 而在 Eigen 中由于用到函数的重载，可以直接写成 p' = q * p 
    **********************************************************************/
    p2 = q2 * q1.inverse() * (p1 - t1) + t2;
    cout <<  endl << " 四元数 求得的p2坐标: " << p2.transpose() << endl;


    /* 以下用欧式变换矩阵求解p2坐标 */
    /********************************************************************* 
     * 使用欧式变换矩阵，我们设两个坐标的变换矩阵为T1和T2，有： p1 = T1 * pw
     *                                              p2 = T2 * pw
     * 联立可以得到如下计算公式： p2 = T2 * T1^{-1} * p1
    **********************************************************************/
    // 欧式变换也称为等距变换(Isometry Transform)
    // 所以欧式变换矩阵使用 Isometry
    Isometry3d T1w(q1), T2w(q2);
    T1w.pretranslate(t1);
    T2w.pretranslate(t2);

    p2 = T2w * T1w.inverse() * p1;
    cout << endl << "用 ‘欧式变换矩阵’ 求解p2坐标: " << p2.transpose() << endl;

    return 0;
}